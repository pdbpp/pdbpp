name: CI

on:
  push:
    branches:
      - "master"
      - "release-[0-9]+.[0-9]+"

  pull_request:
    branches:
      - "master"
      - "ci-gha"  # TODO: remove
      - "release-[0-9]+.[0-9]+"

env:
  PYTEST_ADDOPTS: "-vv --cov-report=xml:coverage-ci.xml"
  PIP_DISABLE_PIP_VERSION_CHECK: true

defaults:
  run:
    shell: bash

jobs:
  tests:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - tox_env: "py39-ipython-coverage"
            python: "3.9"
            os: ubuntu-20.04
          - tox_env: "py38-coverage"
            python: "3.8"
            os: ubuntu-20.04
          - tox_env: "py37-coverage"
            python: "3.7"
            os: ubuntu-20.04
          - tox_env: "py36-coverage"
            python: "3.6"
            os: ubuntu-20.04
          - tox_env: "py35-coverage"
            python: "3.5"
            os: ubuntu-20.04

          - tox_env: "py27-coverage"
            python: "2.7"
            os: ubuntu-20.04
            pytest: "pytest @ git+https://github.com/blueyed/pytest@my-4.6-maintenance"

          - tox_env: "pypy3-coverage"
            python: "pypy-3.7"
            os: ubuntu-20.04
          - tox_env: "pypy-coverage"
            python: "pypy-2.7"
            os: ubuntu-20.04
            pytest: "pytest @ git+https://github.com/blueyed/pytest@my-4.6-maintenance"

          # macOS
          - tox_env: "py37-coverage"
            python: "3.7"
            os: macos-10.15

          # Windows
          - tox_env: "py38-coverage"
            python: "3.8"
            os: windows-2019
          # py34: only on Windows?
          # (https://github.com/actions/setup-python/issues/157#issuecomment-724152312)
          - tox_env: "py34-coverage"
            python: "3.4"
            os: windows-2019
            pytest: "pytest @ git+https://github.com/blueyed/pytest@my-4.6-maintenance"
            tox: tox==3.14.0  # tox 3.14.1 dropped support for py34.
          - tox_env: "py27-coverage"
            python: "2.7"
            os: windows-2016
            pytest: "pytest @ git+https://github.com/blueyed/pytest@my-4.6-maintenance"

          # Generic
          - tox_env: "checkqa"
            python: "3.9"
            os: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2000
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    # Caching.
    - name: set PY_CACHE_KEY
      run: echo "PY_CACHE_KEY=$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')" >> $GITHUB_ENV
    - name: Cache .tox
      uses: actions/cache@v1
      with:
        path: ${{ github.workspace }}/.tox/${{ matrix.tox_env }}
        key: "tox|${{ matrix.os }}|${{ matrix.tox_env }}|${{ env.PY_CACHE_KEY }}|${{ hashFiles('tox.ini', 'setup.*') }}"

    - name: Install tox / version information
      run: |
        python -m pip --version
        if [[ "${{ matrix.python }}" == "3.4" ]]; then
          # Install latest available pip.
          # 7.1.2 (installed) fails to install tox, and tries to install too
          # new pip without version constraint.  19.1.1 is the latest currently.
          python -m pip install -U "pip<19.2"
        fi
        python -m pip install ${{ matrix.tox || 'git+https://github.com/blueyed/tox@master' }}
        python -m pip list

    - name: Setup tox environment
      env:
        PYTEST: ${{ matrix.pytest || 'pytest @ git+https://github.com/blueyed/pytest@my-master' }}
      # TODO: --force-dep="$PYTEST" (fixed for Windows: single quotes / use bash?)
      #       Failed build: https://github.com/blueyed/pdbpp/pull/1/checks?check_run_id=2347344798#step:7:1
      run: python -m tox --notest -v --durations -e ${{ matrix.tox_env }} --force-dep="$PYTEST"

    - name: Test
      env:
        COLUMNS: "120"
        # UTF-8 mode for Windows (https://docs.python.org/3/using/windows.html#utf-8-mode).
        PYTHONUTF8: "1"
        TOX_TESTENV_PASSENV: "PYTHONUTF8"
        PYTEST: ${{ matrix.pytest || 'pytest @ git+https://github.com/blueyed/pytest@my-master' }}
      run: python -m tox -v --durations -e ${{ matrix.tox_env }} --force-dep="$PYTEST"

    - name: Report coverage
      if: always() && (contains(matrix.tox_env, '-coverage'))
      run: "bash .ci/report-coverage.sh -n '${{ matrix.tox_name }}' -F 'GHA,${{ runner.os }}'"
